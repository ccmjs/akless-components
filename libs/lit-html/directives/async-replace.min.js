var __asyncValues=this&&this.__asyncValues||function(o){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var m=o[Symbol.asyncIterator],i;return m?m.call(o):(o=typeof __values==="function"?__values(o):o[Symbol.iterator](),i={},verb("next"),verb("throw"),verb("return"),i[Symbol.asyncIterator]=function(){return this},i);function verb(n){i[n]=o[n]&&function(v){return new Promise(function(resolve,reject){v=o[n](v),settle(resolve,reject,v.done,v.value)})}}function settle(resolve,reject,d,v){Promise.resolve(v).then(function(v){resolve({value:v,done:d})},reject)}};import{directive,NodePart}from"../lit-html.js";export const asyncReplace=directive((value,mapper)=>async part=>{var e_1,_a;if(!(part instanceof NodePart)){throw new Error("asyncReplace can only be used in text bindings")}if(value===part.value){return}const itemPart=new NodePart(part.options);part.value=value;let i=0;try{for(var value_1=__asyncValues(value),value_1_1;value_1_1=await value_1.next(),!value_1_1.done;){let v=value_1_1.value;if(part.value!==value){break}if(i===0){part.clear();itemPart.appendIntoPart(part)}if(mapper!==undefined){v=mapper(v,i)}itemPart.setValue(v);itemPart.commit();i++}}catch(e_1_1){e_1={error:e_1_1}}finally{try{if(value_1_1&&!value_1_1.done&&(_a=value_1.return))await _a.call(value_1)}finally{if(e_1)throw e_1.error}}});