(function(){const component={name:"kanban_board",version:[2,0,1],ccm:"https://ccmjs.github.io/ccm/versions/ccm-18.6.4.js",config:{html:{main:{id:"lanes"},lane:{class:"lane",inner:[{class:"title",inner:"%%"},{class:"cards"}]},add:{id:"add",onclick:"%%"}},css:["ccm.load","https://ccmjs.github.io/akless-components/kanban_board/resources/default.css"],data:{},lanes:["ToDo","Doing","Done"],del:"Do you really want to delete this card?"},Instance:function(){let $,data;this.ready=(async()=>{$=this.ccm.helper;if($.isObject(this.data)&&$.isDatastore(this.data.store))this.data.store.onchange=this.start;this.logger&&this.logger.log("ready",$.privatize(this,true))});this.start=(async()=>{data=await $.dataset(this.data);if(!data.lanes)data.lanes=[];for(let i=0;i<this.lanes.length;i++)if(!data.lanes[i])data.lanes[i]={cards:[]};this.logger&&this.logger.log("start",$.clone(data));$.setContent(this.element,$.html(this.html.main));const lanes_elem=this.element.querySelector("#lanes");for(let i=0;i<this.lanes.length;i++){const lane_data=data.lanes[i];const lane_elem=$.html(this.html.lane,this.lanes[i]);const cards_elem=lane_elem.querySelector(".cards");for(let j=0;j<lane_data.cards.length;j++){const card_dependency=lane_data.cards[j];card_dependency[2]=$.clone(card_dependency[2]||{});card_dependency[2].parent=this;const card_inst=await $.solveDependency(card_dependency);await card_inst.start();cards_elem.appendChild(card_inst.root);card_inst.root.classList.add("card");makeDraggable(this,card_inst.root);makeDroppable(this,card_inst.root);card_inst.root.addEventListener("dblclick",async()=>{if(!confirm(this.del))return;const card_data=data.lanes[i].cards[j];data.lanes[i].cards.splice(j,1);this.data.store&&await this.data.store.set(data);const event_data={lane:i,card:j,data:card_data};this.logger&&this.logger.log("del",$.clone(event_data));this.onchange&&this.onchange.call(this,$.clone(event_data));this.start()})}if(this.ignore&&i===0)lane_elem.appendChild($.html(this.html.add,async()=>{const config=$.clone(this.ignore.card.config);if($.isObject(config.data)&&config.data.store)config.data.key=$.generateKey();data.lanes[i].cards.push(["ccm.instance",this.ignore.card.component,config]);this.data.store&&await this.data.store.set(data);this.onchange&&this.onchange.call(this);this.logger&&this.logger.log("add");this.start()}));lanes_elem.appendChild(lane_elem)}function makeDraggable(self,card_elem){card_elem.draggable=true;card_elem.addEventListener("dragstart",event=>{const pos=getPosition(event.target);event.dataTransfer.setData("text",pos.join(","));[...lanes_elem.querySelectorAll(".cards")].forEach(cards_elem=>{const drop_zone=$.html({class:"drop_zone"});drop_zone.style.width=event.target.offsetWidth+"px";drop_zone.style.height=event.target.offsetHeight+"px";makeDroppable(self,drop_zone);cards_elem.appendChild(drop_zone)});self.logger&&self.logger.log("drag",{lane:pos[0],card:pos[1],data:$.clone(data.lanes[pos[0]].cards[pos[1]])})});card_elem.addEventListener("dragend",()=>[...lanes_elem.querySelectorAll(".drop_zone")].forEach($.removeElement))}function makeDroppable(self,elem){elem.addEventListener("dragover",event=>event.preventDefault());elem.addEventListener("drop",async event=>{const from=event.dataTransfer.getData("text").split(",").map(value=>parseInt(value));const to=getPosition(event.target);if(from[0]===to[0]&&(from[1]===to[1]||from[1]===to[1]-1))return;const card_data=data.lanes[from[0]].cards[from[1]];data.lanes[from[0]].cards[from[1]]=null;data.lanes[to[0]].cards.splice(to[1],0,card_data);if(data.lanes[from[0]].cards[from[1]]!==null)from[1]++;data.lanes[from[0]].cards.splice(from[1],1);const event_data={from:from,to:to,data:card_data};self.logger&&self.logger.log("drop",$.clone(event_data));self.onchange&&self.onchange.call(self,$.clone(event_data));if(self.data.store){await self.data.store.set(data);self.start()}})}function getPosition(card_elem){const lane_elem=$.findParentElementByClass(card_elem,"lane");const x=[...lane_elem.parentNode.children].indexOf(lane_elem);const y=[...card_elem.parentNode.children].indexOf(card_elem);return[x,y]}});this.getValue=(()=>data)}};let b="ccm."+component.name+(component.version?"-"+component.version.join("."):"")+".js";if(window.ccm&&null===window.ccm.files[b])return window.ccm.files[b]=component;(b=window.ccm&&window.ccm.components[component.name])&&b.ccm&&(component.ccm=b.ccm);"string"===typeof component.ccm&&(component.ccm={url:component.ccm});let c=(component.ccm.url.match(/(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)/)||["latest"])[0];if(window.ccm&&window.ccm[c])window.ccm[c].component(component);else{var a=document.createElement("script");document.head.appendChild(a);component.ccm.integrity&&a.setAttribute("integrity",component.ccm.integrity);component.ccm.crossorigin&&a.setAttribute("crossorigin",component.ccm.crossorigin);a.onload=function(){window.ccm[c].component(component);document.head.removeChild(a)};a.src=component.ccm.url}})();