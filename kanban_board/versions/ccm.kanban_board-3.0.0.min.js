(()=>{const component={name:"kanban_board",ccm:"https://ccmjs.github.io/ccm/versions/ccm-25.2.1.js",config:{css:["ccm.load","https://ccmjs.github.io/akless-components/kanban_board/resources/default.css"],permissions:{access:"all"},data:{store:["ccm.store"],key:"test"},del:"Do you really want to delete this card?",helper:["ccm.load","https://ccmjs.github.io/akless-components/modules/versions/helper-4.2.1.mjs"],html:["ccm.load","https://ccmjs.github.io/akless-components/kanban_board/resources/templates.html"],lanes:["ToDo","Doing","Done"]},Instance:function(){let $,dataset;this.ready=(async()=>{$=Object.assign({},this.ccm.helper,this.helper);this.data.store.onchange=this.refresh;this.logger&&this.logger.log("ready",$.privatize(this,true))});this.start=(async()=>{dataset=await $.dataset(this.data);if(!dataset.lanes)dataset.lanes=[];for(let i=0;i<this.lanes.length;i++)if(!dataset.lanes[i])dataset.lanes[i]={cards:[]};this.logger&&this.logger.log("start",this.getValue());$.setContent(this.element,$.html(this.html.main,{onreload:this.start}));if(this.data.store.source().url&&this.data.store.source().url.startsWith("ws"))$.remove(this.element.querySelector("#reload"));if(this.user){$.append(this.element.querySelector("#top"),this.user.root);this.user.start()}for(let i=0;i<this.lanes.length;i++){const lane_elem=$.html(this.html.lane,this.lanes[i]);this.element.querySelector("#lanes").appendChild(lane_elem);for(let j=0;j<dataset.lanes[i].cards.length;j++)await this.addCardElement(i,this.getCardData(i,j));if(this.ignore&&this.ignore.card&&i===0)lane_elem.appendChild($.html(this.html.add,this.addCard))}});this.refresh=(async(priodata=dataset)=>{const last_change=priodata.last_change;if(!last_change)return this.start();let card;switch(last_change.event){case"add":const cards=dataset.lanes[0].cards.length;if(cards!==last_change.cards)return this.start();this.addCardElement(0,last_change.app);this.addCardData(last_change.app);break;case"move":card=this.getCardData(last_change.from[0],last_change.from[1]);if($.stringify(card)!==$.stringify(last_change.app))return this.start();this.moveCardElement(last_change.from,last_change.to);this.moveCardData(last_change.from,last_change.to);break;case"del":card=this.getCardData(last_change.lane,last_change.card);if($.stringify(card)!==$.stringify(last_change.app))return this.start();this.deleteCardElement(last_change.lane,last_change.card);this.deleteCardData(last_change.lane,last_change.card);break;default:return this.start()}});this.getValue=(()=>$.clone(dataset));this.addCard=(async()=>{const config=$.clone(this.ignore.card.config||{});if($.isObject(config.data)&&config.data.store)config.data.key=$.generateKey();dataset.last_change={event:"add",cards:dataset.lanes[0].cards.length,app:["ccm.instance",this.ignore.card.component,config]};await this.refresh();this.data.store&&await this.data.store.set(dataset);this.logger&&this.logger.log("add");this.onchange&&this.onchange.call(this)});this.addCardData=(async card=>dataset.lanes[0].cards.push($.clone(card)));this.addCardElement=(async(lane,card)=>{card=$.clone(card);card[2]=await $.solveDependency(card[2]);card[2]=$.clone(card[2]||{});card[2].parent=this;card=await $.solveDependency(card);await card.start();card=card.root;card.classList.add("card");this.element.querySelectorAll(".cards")[lane].appendChild(card);makeDraggable.call(this,card);makeDroppable.call(this,card);card.addEventListener("dblclick",async event=>{if(!confirm(this.del))return;const pos=this.getCardPosition(event.target);await this.deleteCard(pos[0],pos[1])});function makeDraggable(card_elem){card_elem.draggable=true;card_elem.addEventListener("dragstart",event=>{const pos=this.getCardPosition(event.target);event.dataTransfer.setData("text",pos.join(","));this.element.querySelectorAll(".cards").forEach(cards_elem=>{const drop_zone=$.html({class:"drop_zone"});drop_zone.style.width=event.target.offsetWidth+"px";drop_zone.style.height=event.target.offsetHeight+"px";makeDroppable.call(this,drop_zone);cards_elem.appendChild(drop_zone)})});card_elem.addEventListener("dragend",()=>this.element.querySelectorAll(".drop_zone").forEach($.remove))}function makeDroppable(elem){elem.addEventListener("dragover",event=>event.preventDefault());elem.addEventListener("drop",async event=>{const from=event.dataTransfer.getData("text").split(",").map(value=>parseInt(value));const to=this.getCardPosition(event.target);if(from[0]===to[0]&&(from[1]===to[1]||from[1]===to[1]-1))return;await this.moveCard(from,to)})}});this.deleteCard=(async(lane,card)=>{const app=this.getCardData(lane,card);dataset.last_change={event:"del",lane:lane,card:card,app:app};await this.refresh();this.data.store&&await this.data.store.set(dataset);this.logger&&this.logger.log("del",{lane:lane,card:card,app:$.clone(app)});this.onchange&&this.onchange({event:"del",lane:lane,card:card,app:$.clone(app),instance:this})});this.deleteCardData=((lane,card)=>dataset.lanes[lane].cards.splice(card,1));this.deleteCardElement=((lane,card)=>$.remove(this.getCardElement(lane,card)));this.getCardData=((lane,card)=>$.clone(dataset.lanes[lane].cards[card]));this.getCardElement=((lane,card)=>this.element.querySelectorAll(".lane")[lane].querySelectorAll(".card")[card]);this.getCardPosition=(card=>{const lane=card.closest(".lane");return[[...lane.parentNode.children].indexOf(lane),[...card.parentNode.children].indexOf(card)]});this.moveCard=(async(from,to)=>{const card=this.getCardData(from[0],from[1]);dataset.last_change={event:"move",from:from,to:to,app:card};await this.refresh();await this.data.store.set(dataset);this.logger&&this.logger.log("move",{from:from,to:to,data:$.clone(card)});this.onchange&&this.onchange({event:"move",from:from,to:to,data:$.clone(card),instance:this})});this.moveCardData=((from,to)=>{const card=this.getCardData(from[0],from[1]);dataset.lanes[from[0]].cards[from[1]]=null;dataset.lanes[to[0]].cards.splice(to[1],0,card);if(this.getCardData(from[0],from[1]))from[1]++;dataset.lanes[from[0]].cards.splice(from[1],1)});this.moveCardElement=((from,to)=>{from=this.getCardElement(from[0],from[1]);const dest=this.getCardElement(to[0],to[1]-1);if(dest)dest.parentNode.insertBefore(from,dest.nextSibling);else $.prepend(this.element.querySelectorAll(".cards")[to[0]],from)})}};let b="ccm."+component.name+(component.version?"-"+component.version.join("."):"")+".js";if(window.ccm&&null===window.ccm.files[b])return window.ccm.files[b]=component;(b=window.ccm&&window.ccm.components[component.name])&&b.ccm&&(component.ccm=b.ccm);"string"===typeof component.ccm&&(component.ccm={url:component.ccm});let c=(component.ccm.url.match(/(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)/)||["latest"])[0];if(window.ccm&&window.ccm[c])window.ccm[c].component(component);else{var a=document.createElement("script");document.head.appendChild(a);component.ccm.integrity&&a.setAttribute("integrity",component.ccm.integrity);component.ccm.crossorigin&&a.setAttribute("crossorigin",component.ccm.crossorigin);a.onload=function(){window.ccm[c].component(component);document.head.removeChild(a)};a.src=component.ccm.url}})();